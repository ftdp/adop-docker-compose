#!/bin/bash -e

SUB_CMD_NAME="swarm"
VOLUME_DRIVER="local"

cmd_usage() {
    echo "usage: ${CMD_NAME} ${SUB_CMD_NAME} [<options>]"
    echo "Options:"
    printf "    %-12s   %s\n" "-a <option>" "Example description."
}

help() {
    cmd_usage
    echo
    echo "Available subcommands are:"
    printf "    %-22s   %s\n" "init" "Launches the ADOP platform onto a Docker swarm."
    printf "    %-22s   %s\n" "down" "Brings down the ADOP services running in the swarm."
    printf "    %-22s   %s\n" "down --volumes" "Brings down the ADOP services running in the swarm and destroys associated volumes."
    printf "    %-22s   %s\n" "down --networks" "Brings down the ADOP services running in the swarm and removes associated networks."
    printf "    %-22s   %s\n" "help" "Prints this help information"
    echo
}

pretty_sleep() {
    secs=${1:-60}
    tool=${2:-service}
    while [ $secs -gt 0 ]; do
        echo -ne "$tool unavailable, sleeping for: $secs\033[0Ks\r"
        sleep 1
        : $((secs--))
    done
    echo "$tool was unavailable, so slept for: ${1:-60} secs"
}

prep_env() {
  # Nothing specific is here
  source ${CLI_DIR}/credentials.generate.sh
  source ${CLI_DIR}/env.config.sh
  source ${CLI_DIR}/conf/env.provider.sh
}

create_volume_and_network() {
  if [ -n ${NFS_HOST+x} ]; then
    docker volume create --driver local --opt type=nfs --opt o=addr=$NFS_HOST,rw --opt device=:$NFS_FOLDER/$REGISTRY_CERT_VOL --name=$REGISTRY_CERT_VOL
    VOLUME_DRIVER="nfs"
  else
    docker volume create $REGISTRY_CERT_VOL
  fi

  docker network create --attachable -d overlay ${CUSTOM_NETWORK_NAME}
}

init() {
	echo '
 ______     _____     ______     ______
/\  __ \   /\  __-.  /\  __ \   /\  == \
\ \  __ \  \ \ \/\ \ \ \ \/\ \  \ \  _-/
 \ \_\ \_\  \ \____-  \ \_____\  \ \_\
  \/_/\/_/   \/____/   \/_____/   \/_/

 ______     __     __     ______     ______     __    __
/\  ___\   /\ \  _ \ \   /\  __ \   /\  == \   /\ "-./  \
\ \___  \  \ \ \/ ".\ \  \ \  __ \  \ \  __<   \ \ \-./\ \
 \/\_____\  \ \__/".~\_\  \ \_\ \_\  \ \_\ \_\  \ \_\ \ \_\
  \/_____/   \/_/   \/_/   \/_/\/_/   \/_/ /_/   \/_/  \/_/
	'
	echo "* Initialising ADOP (Docker Swarm Mode)"

	prep_env

  set +e

  create_volume_and_network

  set -e

  cp swarm-compose.yml swarm-compose.merged.yml
  cat etc/volumes/$VOLUME_DRIVER/swarm.yml >> swarm-compose.merged.yml

	# Launches ADOP into the swarm.
	docker stack deploy -c swarm-compose.merged.yml ${PLATFORM_NAME}


	# Wait for Nginx to come up before proceeding
	echo "* Waiting for the ADOP Swarm to become available"
	echo "* Pulling down the Docker images may take a moment..."
	until [[ $(curl -k -I -s -u ${INITIAL_ADMIN_USER}:${INITIAL_ADMIN_PASSWORD_PLAIN} ${PROTO}://${TARGET_HOST}/|head -n 1|cut -d$' ' -f2) == 200 ]]; do pretty_sleep 5 ADOP Swarm; done

}

down() {
	echo '
 ______     _____     ______     ______
/\  __ \   /\  __-.  /\  __ \   /\  == \
\ \  __ \  \ \ \/\ \ \ \ \/\ \  \ \  _-/
 \ \_\ \_\  \ \____-  \ \_____\  \ \_\
  \/_/\/_/   \/____/   \/_____/   \/_/

 ______     __     __     ______     ______     __    __
/\  ___\   /\ \  _ \ \   /\  __ \   /\  == \   /\ "-./  \
\ \___  \  \ \ \/ ".\ \  \ \  __ \  \ \  __<   \ \ \-./\ \
 \/\_____\  \ \__/".~\_\  \ \_\ \_\  \ \_\ \_\  \ \_\ \ \_\
  \/_____/   \/_/   \/_/   \/_/\/_/   \/_/ /_/   \/_/  \/_/
	'

    prep_env

    while [[ $1 ]]; do
        case "$1" in
            --volumes)
                export VOLUMES="YES"
                shift
                ;;
            --networks)
                export NETWORKS="YES"
                shift
                ;;
            *)
                echo "Unrecognized option: $1"
                help
                exit 1
                ;;
        esac
    done

    echo 'Bringing ADOP stack down...'

    docker stack rm adop

    until [[ $(docker ps | wc -l) < 2 ]]; do sleep 1; done

    echo 'ADOP stack removed.'

    if [ "${VOLUMES}" = "YES" ]; then
      NODE_ADDRESSES=$(docker node ls | grep Active | sed 's/-/./g' | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
      echo $NODE_ADDRESSES
    fi

    if [ "${NETWORKS}" = "YES" ]; then
      docker network rm ${CUSTOM_NETWORK_NAME}
    fi
}

shift $(($OPTIND -1))
SUBCOMMAND_OPT="${1:-help}"

# Only shift if there are other parameters
if [ $# -ge 1 ]; then
    shift
fi

case ${SUBCOMMAND_OPT} in
    "help"|"init"|"down")
        ${SUBCOMMAND_OPT} "$@"
        ;;
    *)
	echo "unknown command"
        ;;
esac